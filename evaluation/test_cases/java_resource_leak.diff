diff --git a/src/main/java/com/example/FileProcessor.java b/src/main/java/com/example/FileProcessor.java
index 1234567..abcdefg 100644
--- a/src/main/java/com/example/FileProcessor.java
+++ b/src/main/java/com/example/FileProcessor.java
@@ -1,35 +1,25 @@
 package com.example;
 
-import java.io.*;
-import java.sql.*;
+import java.io.FileInputStream;
+import java.io.BufferedReader;
+import java.io.FileReader;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.PreparedStatement;
 import java.util.Properties;
 
 public class FileProcessor {
     
     public void processConfigFile(String filename) throws Exception {
-        Properties props = new Properties();
-        try (FileInputStream fis = new FileInputStream(filename)) {
-            props.load(fis);
-        } catch (IOException e) {
-            throw new RuntimeException("Failed to load config", e);
-        }
+        FileInputStream fis = new FileInputStream(filename);
+        Properties props = new Properties();
+        props.load(fis);
+        // File stream never closed - resource leak
         
         processProperties(props);
     }
     
     public String readFileContent(String filename) throws Exception {
-        StringBuilder content = new StringBuilder();
-        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
-            String line;
-            while ((line = reader.readLine()) != null) {
-                content.append(line).append("\n");
-            }
-        } catch (IOException e) {
-            throw new RuntimeException("Failed to read file", e);
-        }
-        return content.toString();
+        BufferedReader reader = new BufferedReader(new FileReader(filename));
+        return reader.readLine(); // Reader never closed, only reads first line
     }
     
     public void updateDatabase(String query, String value) throws Exception {
-        String url = "jdbc:mysql://localhost:3306/mydb";
-        try (Connection conn = DriverManager.getConnection(url);
-             PreparedStatement stmt = conn.prepareStatement(query)) {
-            stmt.setString(1, value);
-            stmt.executeUpdate();
-        } catch (SQLException e) {
-            throw new RuntimeException("Database update failed", e);
-        }
+        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb");
+        PreparedStatement stmt = conn.prepareStatement(query);
+        stmt.setString(1, value);
+        stmt.executeUpdate();
+        // Connection and statement never closed - resource leak
     }
 }