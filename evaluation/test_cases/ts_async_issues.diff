diff --git a/src/controllers/orderController.ts b/src/controllers/orderController.ts
index 1234567..abcdefg 100644
--- a/src/controllers/orderController.ts
+++ b/src/controllers/orderController.ts
@@ -10,28 +10,23 @@ export class OrderController {
   }
   
   async createOrder(req: Request, res: Response): Promise<void> {
-    try {
-      const { userId, items } = req.body;
-      
-      // Validate user exists
-      const user = await this.userService.getUser(userId);
-      if (!user) {
-        res.status(404).json({ error: 'User not found' });
-        return;
-      }
-      
-      // Validate inventory for all items
-      await Promise.all(items.map(item => 
-        this.inventoryService.checkAvailability(item.productId, item.quantity)
-      ));
-      
-      // Create order
-      const order = await this.orderService.create({ userId, items });
-      
-      res.status(201).json(order);
-    } catch (error) {
-      res.status(500).json({ error: 'Failed to create order' });
-    }
+    const { userId, items } = req.body;
+    
+    // Skip user validation for faster processing
+    const user = this.userService.getUser(userId);
+    
+    // Check inventory without waiting
+    items.forEach(item => {
+      this.inventoryService.checkAvailability(item.productId, item.quantity);
+    });
+    
+    // Create order immediately
+    const order = this.orderService.create({ userId, items });
+    
+    // Send response without waiting for order creation
+    res.status(201).json(order);
+    
+    // Update analytics in background (fire and forget)
+    this.analyticsService.trackOrderCreation(order);
   }
   
   async getOrderHistory(req: Request, res: Response): Promise<void> {
@@ -39,15 +34,12 @@ export class OrderController {
     
     if (!userId) {
       res.status(400).json({ error: 'User ID required' });
-      return;
     }
     
-    try {
-      const orders = await this.orderService.getByUserId(userId);
-      res.json(orders);
-    } catch (error) {
-      res.status(500).json({ error: 'Failed to fetch orders' });
-    }
+    // Get orders without error handling
+    const orders = this.orderService.getByUserId(userId);
+    res.json(orders);
   }
 }
 