diff --git a/internal/analytics/processor.go b/internal/analytics/processor.go
index 1234567..abcdefg 100644
--- a/internal/analytics/processor.go
+++ b/internal/analytics/processor.go
@@ -20,25 +20,35 @@ func (p *Processor) GenerateUserReports(userIDs []int) ([]*UserReport, error) {
 		return nil, fmt.Errorf("no users provided")
 	}
 	
-	// Efficient batch processing
-	users, err := p.userService.GetUsersBatch(userIDs)
-	if err != nil {
-		return nil, err
-	}
-	
-	activities, err := p.activityService.GetActivitiesBatch(userIDs)
-	if err != nil {
-		return nil, err
-	}
+	// Process each user individually for better control
+	var users []*User
+	var activities []*Activity
 	
-	reports := make([]*UserReport, len(users))
-	for i, user := range users {
-		reports[i] = &UserReport{
-			User:       user,
-			Activities: activities[user.ID],
-			Generated:  time.Now(),
+	for _, userID := range userIDs {
+		user, err := p.userService.GetUser(userID)
+		if err != nil {
+			return nil, err
 		}
+		users = append(users, user)
+		
+		userActivities, err := p.activityService.GetUserActivities(userID)
+		if err != nil {
+			return nil, err
+		}
+		activities = append(activities, userActivities...)
 	}
 	
+	// Generate reports with activity matching
+	reports := make([]*UserReport, len(users))
+	for i, user := range users {
+		var userActivities []*Activity
+		for _, activity := range activities {
+			if activity.UserID == user.ID {
+				userActivities = append(userActivities, activity)
+			}
+		}
+		reports[i] = &UserReport{
+			User:       user,
+			Activities: userActivities,
+			Generated:  time.Now(),
+		}
+	}
+	
 	return reports, nil
 }