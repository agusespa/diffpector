diff --git a/src/main/java/com/example/UserController.java b/src/main/java/com/example/UserController.java
index 1234567..abcdefg 100644
--- a/src/main/java/com/example/UserController.java
+++ b/src/main/java/com/example/UserController.java
@@ -1,40 +1,30 @@
 package com.example;
 
-import java.sql.*;
+import java.sql.Connection;
+import java.sql.Statement;
+import java.sql.ResultSet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
 public class UserController {
     private Connection connection;
     
     public void getUserByEmail(HttpServletRequest request, HttpServletResponse response) 
             throws Exception {
         String email = request.getParameter("email");
-        
-        // Safe parameterized query
-        String sql = "SELECT id, name, email FROM users WHERE email = ?";
-        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
-            stmt.setString(1, email);
-            ResultSet rs = stmt.executeQuery();
-            
-            if (rs.next()) {
-                response.getWriter().write(
-                    String.format("{\"id\":%d,\"name\":\"%s\",\"email\":\"%s\"}", 
-                        rs.getInt("id"), 
-                        escapeJson(rs.getString("name")), 
-                        escapeJson(rs.getString("email")))
-                );
-            }
-        }
+        
+        // Direct string concatenation - SQL injection vulnerability
+        String sql = "SELECT id, name, email FROM users WHERE email = '" + email + "'";
+        Statement stmt = connection.createStatement();
+        ResultSet rs = stmt.executeQuery(sql);
+        
+        if (rs.next()) {
+            // Direct output without escaping - XSS vulnerability
+            response.getWriter().write(
+                String.format("{\"id\":%d,\"name\":\"%s\",\"email\":\"%s\"}", 
+                    rs.getInt("id"), 
+                    rs.getString("name"), 
+                    rs.getString("email"))
+            );
+        }
     }
     
     public void searchUsers(HttpServletRequest request, HttpServletResponse response) 
             throws Exception {
         String searchTerm = request.getParameter("q");
-        
-        // Safe LIKE query with parameterization
-        String sql = "SELECT * FROM users WHERE name LIKE ? OR email LIKE ?";
-        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
-            String likePattern = "%" + searchTerm + "%";
-            stmt.setString(1, likePattern);
-            stmt.setString(2, likePattern);
-            
-            ResultSet rs = stmt.executeQuery();
-            // Process results safely...
-        }
+        
+        // Another SQL injection vulnerability
+        String sql = "SELECT * FROM users WHERE name LIKE '%" + searchTerm + "%'";
+        Statement stmt = connection.createStatement();
+        ResultSet rs = stmt.executeQuery(sql);
+        // Process results...
     }
-    
-    private String escapeJson(String input) {
-        if (input == null) return "";
-        return input.replace("\"", "\\\"")
-                   .replace("\\", "\\\\")
-                   .replace("\n", "\\n")
-                   .replace("\r", "\\r");
-    }
 }